{"ast":null,"code":"var _jsxFileName = \"/home/pi/TT/react-api-demo/src/MqttSubscriber.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport mqtt from 'mqtt';\n\n// Definir los tipos de tramas como constantes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst COD_KEYPAD = 0xF0;\nconst COD_FINGERPRINT = 0xEF;\nconst COD_CARD = 0x01;\n\n// Definir el header común para todas las tramas\nconst HEADER_ = [0xa6, 0x00, 0x0c, 0x01, 0x40];\nconst HEADER = \"a6 00 0c 01 40 \";\nconst FOOTER = \" 00 00\";\nconst MqttSubscriber = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    // const client = mqtt.connect('ws://broker.hivemq.com:8000/mqtt');\n    const client = mqtt.connect('ws://192.168.0.248:9001/mqtt');\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('reefet', err => {\n        if (!err) {\n          console.log('Subscribed to topic');\n        }\n      });\n    });\n    client.on('message', (topic, message) => {\n      const ms = message.toString();\n      const cod = ms.split(\" \")[5];\n\n      // Expresión regular para obtener el substring entre HEADER y FOOTER\n      const regex = new RegExp(`${HEADER}(.*?)${FOOTER}`);\n\n      // Buscar el substring entre HEADER y FOOTER en el string original\n      const match = ms.match(regex);\n\n      // Obtener el substring encontrado\n      const salida = match ? match[1] : null;\n      let str_salida = \"\";\n      switch (cod) {\n        case COD_KEYPAD:\n          console.log(\"KEYPAD\", salida);\n          str_salida = \"KEYPAD \" + salida;\n          break;\n        case COD_FINGERPRINT:\n          console.log(\"FINGERPRINT\", salida);\n          str_salida = \"FINGERPRINT \" + salida;\n          break;\n        case COD_CARD:\n          console.log(\"CARD\", salida);\n          str_salida = \"CARD \" + salida;\n          break;\n      }\n      setMessage(str_salida);\n    });\n    return () => {\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"MQTT Subscriber\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Mensaje: \", message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(MqttSubscriber, \"3v4ozrfWvlmZ97O5zgyhgDZKC+M=\");\n_c = MqttSubscriber;\nexport default MqttSubscriber;\nvar _c;\n$RefreshReg$(_c, \"MqttSubscriber\");","map":{"version":3,"names":["React","useEffect","useState","mqtt","jsxDEV","_jsxDEV","COD_KEYPAD","COD_FINGERPRINT","COD_CARD","HEADER_","HEADER","FOOTER","MqttSubscriber","_s","message","setMessage","client","connect","on","console","log","subscribe","err","topic","ms","toString","cod","split","regex","RegExp","match","salida","str_salida","end","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/pi/TT/react-api-demo/src/MqttSubscriber.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport mqtt from 'mqtt';\n\n// Definir los tipos de tramas como constantes\nconst COD_KEYPAD = 0xF0\nconst COD_FINGERPRINT = 0xEF\nconst COD_CARD = 0x01\n\n// Definir el header común para todas las tramas\nconst HEADER_ = [0xa6, 0x00, 0x0c, 0x01, 0x40]\nconst HEADER = \"a6 00 0c 01 40 \"\nconst FOOTER = \" 00 00\"\n\nconst MqttSubscriber = () => {\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    // const client = mqtt.connect('ws://broker.hivemq.com:8000/mqtt');\n    const client = mqtt.connect('ws://192.168.0.248:9001/mqtt');\n\n    client.on('connect', () => {\n      console.log('Connected to MQTT broker');\n      client.subscribe('reefet', (err) => {\n        if (!err) {\n          console.log('Subscribed to topic');\n        }\n      });\n    });\n\n    client.on('message', (topic, message) => {\n      const ms = message.toString();\n      const cod = ms.split(\" \")[5]\n\n      // Expresión regular para obtener el substring entre HEADER y FOOTER\n      const regex = new RegExp(`${HEADER}(.*?)${FOOTER}`);\n\n      // Buscar el substring entre HEADER y FOOTER en el string original\n      const match = ms.match(regex);\n\n      // Obtener el substring encontrado\n      const salida = match ? match[1] : null;\n      let str_salida = \"\"\n\n      switch(cod){\n        case COD_KEYPAD:\n          console.log(\"KEYPAD\", salida)\n          str_salida = \"KEYPAD \" + salida\n          break;\n        case COD_FINGERPRINT:\n          console.log(\"FINGERPRINT\", salida)\n          str_salida = \"FINGERPRINT \" + salida\n          break;\n        case COD_CARD:\n          console.log(\"CARD\", salida)\n          str_salida = \"CARD \" + salida\n          break;\n      }\n      setMessage(str_salida);\n    });\n\n    return () => {\n      if (client) {\n        client.end();\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <h2>MQTT Subscriber</h2>\n      <p>Mensaje: {message}</p>\n    </div>\n  );\n};\n\nexport default MqttSubscriber;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}